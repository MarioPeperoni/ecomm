// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL_NON_POOLING")
}

enum StoreCategory {
  GROCERY
  ELECTRONICS
  CLOTHING
  BOOKS
  FURNITURE
}

model Store {
  id String @id @default(uuid())

  name        String        @unique
  domain      String        @unique
  description String
  category    StoreCategory

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminId String

  Billboards Billboard[] @relation("StoreToBillboard")
  Categories Category[]  @relation("StoreToCategory")
  TagGroup   TagGroup[]  @relation("StoreToTagGroup")
  Product    Product[]   @relation("StoreToProduct")
  Order      Order[]     @relation("StoreToOrder")
}

enum FontName {
  ARIAL
  TIMES_NEW_ROMAN
  COMIC_SANS
}

model Billboard {
  id String @id @default(uuid())

  storeId String
  Store   Store  @relation("StoreToBillboard", fields: [storeId], references: [id])

  label    String
  text     String?
  fontName FontName
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Category Category[]
}

model Category {
  id String @id @default(uuid())

  name String

  storeId String
  Store   Store  @relation("StoreToCategory", fields: [storeId], references: [id])

  billboardId String?
  Billboard   Billboard? @relation(fields: [billboardId], references: [id], onDelete: SetNull)

  Product Product[] @relation("StoreToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TagGroup {
  id String @id @default(uuid())

  name String
  Tags Tag[]

  storeId String
  Store   Store  @relation("StoreToTagGroup", fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id String @id @default(uuid())

  index Int
  name  String

  tagId    String
  TagGroup TagGroup @relation(fields: [tagId], references: [id], onDelete: Cascade)

  ProductTag ProductTag[] @relation("TagToProductProductTag")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id String @id @default(uuid())

  name        String
  description String
  price       Float
  imagesUrl   String[]

  quantity Int[]

  ProductTag ProductTag[] @relation("ProductToProductTag")

  isFeatured Boolean @default(false)

  storeId    String
  Store      Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  Category   Category @relation("StoreToProduct", fields: [categoryId], references: [id])

  OrderItems OrderItem[] @relation("ProductToOrderItem")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductTag {
  id String @id @default(uuid())

  productId String
  Product   Product @relation("ProductToProductTag", fields: [productId], references: [id])

  tagId String
  Tag   Tag    @relation("TagToProductProductTag", fields: [tagId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id String @id @default(uuid())

  storeId String
  Store   Store  @relation("StoreToOrder", fields: [storeId], references: [id])

  OrderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id String @id @default(uuid())

  productId String
  Product   Product @relation("ProductToOrderItem", fields: [productId], references: [id])

  orderId String
  Order   Order  @relation(fields: [orderId], references: [id])

  quantity Int
  size     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
